(* Starting file for the server *)

import lists
import declassifyutil
import stdio
let fun server db = (* TODO: finish this *)
let
            val _ = printString "Server started\n"
		    val Newprofile = receive [hn ("NEWPROFILE", Newprofile )
                                => Newprofile]
		    val _ = printString "New profile received\n"
		    val ((lev, name, year, gender, interests), agent, pid) = Newprofile
            		    val profile = (lev, name, year, gender, interests)
                        fun Runagent(dbprofile,dbagent,dbpid) =let
                                         val dbmatch = let pini authority val dbmatch =
                                                    dbagent profile
                                                    in dbmatch
                                                    end

                                        val match =let pini authority val match =
                                                    agent dbprofile
                                                    in match
                                                    end



                            in (match, dbmatch, pid, dbpid)
                            end
                        val matches = map Runagent db
                                    fun Sendnewmatch(match,dbmatch,pid,dbpid) = let
                                        val (bool1,profile1) = declassifydeep(match, authority, `{}`)
                                        val (bool2,profile2) = declassifydeep(dbmatch, authority, `{}`)
                                        in if bool1 andalso bool2 then
                                               let
                                                    val _ = printString "Match found\n"
                                                    val (lev1, name1, year1, gender1, interests1) = profile1
                                                    val (lev2, name2, year2, gender2, interests2) = profile2
                                                    val profile1 = let pini authority
                                                    val (_, profile1) = declassifydeep(match, authority, lev2)
                                                    in profile1
                                                    end
                                                    val profile2 = let pini authority
                                                    val (_, profile2) = declassifydeep(dbmatch, authority, lev1)
                                                    in profile2
                                                    end
                                                    val _ = send (dbpid, ("NEWMATCH", profile1))
                                                    val _ = printWithLabels profile1
                                                    val _ = send (pid, ("NEWMATCH", profile2))
                                                    val _ = printWithLabels profile2
                                                in ()
                                                end
                                            else ()

                                        end
                                    val _ = map Sendnewmatch matches
         in server (Newprofile::db)
         end

    (* Our main function starts the server and then requests the
       dispatcher to send some clients this way. *)

    fun main () =
        let val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            val _ =  register ("datingServer", spawn (fn () => server []), authority)
        in  (* TODO: Feel free to comment out the next line
                     while you develop your solution and work on a few
                     custom clients;  *)
            send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode));
            ()
        end
in main ()
end
