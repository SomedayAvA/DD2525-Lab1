import lists
import declassifyutil
import stdio

let fun server db =
  let
    val _ = printString "Server started\n"
    val Newprofile = receive [hn ("NEWPROFILE", Newprofile) => Newprofile]
    val _ = printString "New profile received\n"
    val ((lev, name, year, gender, interests), agent, pid) = Newprofile
    val profile = (lev, name, year, gender, interests)

    fun Runagent (dbprofile, dbagent, dbpid) =
      let
        val dbmatch =
          let pini authority
            val dbmatch = dbagent profile
          in
            dbmatch
          end

        val match =
          let pini authority
            val match = agent dbprofile
          in
            match
          end
      in
        (match, dbmatch, pid, dbpid)
      end

    fun Sendnewmatch (match, dbmatch, pid, dbpid) =
      let
        val (bool1, _) = match
        val bool1 = declassifydeep (bool1, authority, `{}`)
        val (bool2, _) = dbmatch
        val bool2 = declassifydeep (bool2, authority, `{}`)
      in
        if bool1 andalso bool2 then
          let
            val _ = printString "Match found\n"
            val profile1 =
              let pini authority
                val (_, profile) = match
              in
                profile
              end

            val profile2 =
              let pini authority
                val (_, profile) = dbmatch
              in
                profile
              end
            val _ = printWithLabels profile1
            val _ = printWithLabels profile2
            val _ = send (dbpid, ("NEWMATCH", profile1))
            val _ = send (pid, ("NEWMATCH", profile2))
          in
            ()
          end
        else
          ()
      end

    val _ = map Sendnewmatch (map Runagent db)
  in
  server (Newprofile :: db)
end

fun main () =
  let
    val thisNode = node (self ())
    val _ = printString ("Running node with identifier: " ^ thisNode)
    val _ = register ("datingServer", spawn (fn () => server []), authority)
  in
    send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode));
    ()
  end

in
  main ()
end
