import stdio
import declassifyutil


let fun loop () =
    let
        val _ = print "Waiting for match response..."
        val newResponse = receive [hn ("NEWMATCH", response) => response]
        val _ = printWithLabels ("Match response received:", newResponse)
    in
        loop ()
    end


fun client serverId =
    let
        val lev = `{client1}`
        val name = "client1" raisedTo lev
        val year = 1992 raisedTo lev
        val gender = true raisedTo lev
        val interests = ["reading", "traveling"] raisedTo lev

        val profile = (lev, name, year, gender, interests)
        fun agent (other_lev, other_name, other_year, other_gender, other_interests) =
            let val _ = debugpc()
            in
                if other_gender then (declassify(false, authority, other_lev), declassify((), authority, other_lev))
                else (declassify(true, authority, other_lev), declassifydeep(profile, authority, other_lev))
            end



        val pid = self()

        val _ = send (serverId, ("NEWPROFILE", (profile, agent, pid)))
        val _ = print "Profile and agent sent to the server."
    in
        loop ()
    end

(* 查找服务器ID并启动客户端 *)
val serverId = whereis ("@id-server", "datingServer")
in
    spawn (fn () => client serverId)
end
