import stdio
import declassifyutil


let fun loop () =
    let
        val _ = print "Waiting for match response..."
        val newResponse = receive [hn ("NEWMATCH", response) => response]
        val _ = printWithLabels ("Match response received:", newResponse)
    in
        loop ()
    end

(* 客户端函数，发送新的配置文件请求并进入接收循环 *)
fun client serverId =
    let
        val lev = `{client1}`  (* 设定安全级别 *)
        val name = "client1" raisedTo lev
        val year = 1992 raisedTo lev
        val gender = true raisedTo lev  (* 假设为女性 *)
        val interests = ["reading", "traveling"] raisedTo lev


        fun agent (other_lev, other_name, other_year, other_gender, other_interests) =
            let val _ = debugpc()
            in
                if other_gender then (declassify(false, authority, other_lev), declassify((), authority, other_lev))
                else (declassify(true, authority, other_lev), declassifydeep(profile, authority, other_lev))
            end

        (* 配置文件元组 *)
        val profile = (lev, name, year, gender, interests)
        val pid = self()  (* 获取当前进程ID *)

        val _ = send (serverId, ("NEWPROFILE", (profile, agent, pid)))
        val _ = print "Profile and agent sent to the server."
    in
        loop ()
    end

(* 查找服务器ID并启动客户端 *)
val serverId = whereis ("@id-server", "datingServer")
in
    spawn (fn () => client serverId)
end
